#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabBook
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LabRservationDB")]
	public partial class LabBookDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTeacherInfo(TeacherInfo instance);
    partial void UpdateTeacherInfo(TeacherInfo instance);
    partial void DeleteTeacherInfo(TeacherInfo instance);
    partial void InsertBulletin(Bulletin instance);
    partial void UpdateBulletin(Bulletin instance);
    partial void DeleteBulletin(Bulletin instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCourseArrange(CourseArrange instance);
    partial void UpdateCourseArrange(CourseArrange instance);
    partial void DeleteCourseArrange(CourseArrange instance);
    partial void InsertCourseBookInfo(CourseBookInfo instance);
    partial void UpdateCourseBookInfo(CourseBookInfo instance);
    partial void DeleteCourseBookInfo(CourseBookInfo instance);
    partial void InsertCourseInfo(CourseInfo instance);
    partial void UpdateCourseInfo(CourseInfo instance);
    partial void DeleteCourseInfo(CourseInfo instance);
    partial void InsertCoursePackage(CoursePackage instance);
    partial void UpdateCoursePackage(CoursePackage instance);
    partial void DeleteCoursePackage(CoursePackage instance);
    partial void InsertExperimentInfo(ExperimentInfo instance);
    partial void UpdateExperimentInfo(ExperimentInfo instance);
    partial void DeleteExperimentInfo(ExperimentInfo instance);
    partial void InsertPackageArrange(PackageArrange instance);
    partial void UpdatePackageArrange(PackageArrange instance);
    partial void DeletePackageArrange(PackageArrange instance);
    partial void InsertPackageBookInfo(PackageBookInfo instance);
    partial void UpdatePackageBookInfo(PackageBookInfo instance);
    partial void DeletePackageBookInfo(PackageBookInfo instance);
    partial void InsertPackagedCourse(PackagedCourse instance);
    partial void UpdatePackagedCourse(PackagedCourse instance);
    partial void DeletePackagedCourse(PackagedCourse instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertStudentInfo(StudentInfo instance);
    partial void UpdateStudentInfo(StudentInfo instance);
    partial void DeleteStudentInfo(StudentInfo instance);
    #endregion
		
		public LabBookDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LabRservationDBConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LabBookDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabBookDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabBookDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabBookDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<TeacherInfo> TeacherInfo
		{
			get
			{
				return this.GetTable<TeacherInfo>();
			}
		}
		
		public System.Data.Linq.Table<Bulletin> Bulletin
		{
			get
			{
				return this.GetTable<Bulletin>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comment
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<CourseArrange> CourseArrange
		{
			get
			{
				return this.GetTable<CourseArrange>();
			}
		}
		
		public System.Data.Linq.Table<CourseBookInfo> CourseBookInfo
		{
			get
			{
				return this.GetTable<CourseBookInfo>();
			}
		}
		
		public System.Data.Linq.Table<CourseInfo> CourseInfo
		{
			get
			{
				return this.GetTable<CourseInfo>();
			}
		}
		
		public System.Data.Linq.Table<CoursePackage> CoursePackage
		{
			get
			{
				return this.GetTable<CoursePackage>();
			}
		}
		
		public System.Data.Linq.Table<ExperimentInfo> ExperimentInfo
		{
			get
			{
				return this.GetTable<ExperimentInfo>();
			}
		}
		
		public System.Data.Linq.Table<PackageArrange> PackageArrange
		{
			get
			{
				return this.GetTable<PackageArrange>();
			}
		}
		
		public System.Data.Linq.Table<PackageBookInfo> PackageBookInfo
		{
			get
			{
				return this.GetTable<PackageBookInfo>();
			}
		}
		
		public System.Data.Linq.Table<PackagedCourse> PackagedCourse
		{
			get
			{
				return this.GetTable<PackagedCourse>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semester
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<StudentInfo> StudentInfo
		{
			get
			{
				return this.GetTable<StudentInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private short _Type;
		
		private EntitySet<TeacherInfo> _TeacherInfo;
		
		private EntitySet<Comment> _Comment;
		
		private EntitySet<StudentInfo> _StudentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    #endregion
		
		public Account()
		{
			this._TeacherInfo = new EntitySet<TeacherInfo>(new Action<TeacherInfo>(this.attach_TeacherInfo), new Action<TeacherInfo>(this.detach_TeacherInfo));
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._StudentInfo = new EntitySet<StudentInfo>(new Action<StudentInfo>(this.attach_StudentInfo), new Action<StudentInfo>(this.detach_StudentInfo));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TeacherInfo", Storage="_TeacherInfo", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<TeacherInfo> TeacherInfo
		{
			get
			{
				return this._TeacherInfo;
			}
			set
			{
				this._TeacherInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Comment", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_StudentInfo", Storage="_StudentInfo", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<StudentInfo> StudentInfo
		{
			get
			{
				return this._StudentInfo;
			}
			set
			{
				this._StudentInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeacherInfo(TeacherInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_TeacherInfo(TeacherInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_StudentInfo(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_StudentInfo(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherInfo")]
	public partial class TeacherInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Sex;
		
		private string _PhotoUrl;
		
		private string _PhoneNumber;
		
		private string _Remarks;
		
		private int _AccountId;
		
		private EntitySet<CourseInfo> _CourseInfo;
		
		private EntitySet<CoursePackage> _CoursePackage;
		
		private EntityRef<Account> _Account;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public TeacherInfo()
		{
			this._CourseInfo = new EntitySet<CourseInfo>(new Action<CourseInfo>(this.attach_CourseInfo), new Action<CourseInfo>(this.detach_CourseInfo));
			this._CoursePackage = new EntitySet<CoursePackage>(new Action<CoursePackage>(this.attach_CoursePackage), new Action<CoursePackage>(this.detach_CoursePackage));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(150)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeacherInfo_CourseInfo", Storage="_CourseInfo", ThisKey="Id", OtherKey="TeacherId")]
		public EntitySet<CourseInfo> CourseInfo
		{
			get
			{
				return this._CourseInfo;
			}
			set
			{
				this._CourseInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeacherInfo_CoursePackage", Storage="_CoursePackage", ThisKey="Id", OtherKey="TeacherId")]
		public EntitySet<CoursePackage> CoursePackage
		{
			get
			{
				return this._CoursePackage;
			}
			set
			{
				this._CoursePackage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TeacherInfo", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.TeacherInfo.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.TeacherInfo.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInfo(CourseInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeacherInfo = this;
		}
		
		private void detach_CourseInfo(CourseInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeacherInfo = null;
		}
		
		private void attach_CoursePackage(CoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.TeacherInfo = this;
		}
		
		private void detach_CoursePackage(CoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.TeacherInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bulletin")]
	public partial class Bulletin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _Date;
		
		private string _Bulletiner;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBulletinerChanging(string value);
    partial void OnBulletinerChanged();
    #endregion
		
		public Bulletin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bulletiner", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Bulletiner
		{
			get
			{
				return this._Bulletiner;
			}
			set
			{
				if ((this._Bulletiner != value))
				{
					this.OnBulletinerChanging(value);
					this.SendPropertyChanging();
					this._Bulletiner = value;
					this.SendPropertyChanged("Bulletiner");
					this.OnBulletinerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private int _UserId;
		
		private string _Content;
		
		private System.DateTime _Time;
		
		private int _ParentId;
		
		private EntitySet<Comment> _Comment2;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Comment> _Comment1;
		
		private EntityRef<CourseInfo> _CourseInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    #endregion
		
		public Comment()
		{
			this._Comment2 = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment2), new Action<Comment>(this.detach_Comment2));
			this._Account = default(EntityRef<Account>);
			this._Comment1 = default(EntityRef<Comment>);
			this._CourseInfo = default(EntityRef<CourseInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._CourseInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Comment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment2", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Comment> Comment2
		{
			get
			{
				return this._Comment2;
			}
			set
			{
				this._Comment2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Account", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Comment Comment1
		{
			get
			{
				return this._Comment1.Entity;
			}
			set
			{
				Comment previousValue = this._Comment1.Entity;
				if (((previousValue != value) 
							|| (this._Comment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment1.Entity = null;
						previousValue.Comment2.Remove(this);
					}
					this._Comment1.Entity = value;
					if ((value != null))
					{
						value.Comment2.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(int);
					}
					this.SendPropertyChanged("Comment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_Comment", Storage="_CourseInfo", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public CourseInfo CourseInfo
		{
			get
			{
				return this._CourseInfo.Entity;
			}
			set
			{
				CourseInfo previousValue = this._CourseInfo.Entity;
				if (((previousValue != value) 
							|| (this._CourseInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInfo.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._CourseInfo.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("CourseInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comment2(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = this;
		}
		
		private void detach_Comment2(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseArrange")]
	public partial class CourseArrange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private byte _Week;
		
		private byte _WeekDay;
		
		private int _Capacity;
		
		private byte _BeginLesson;
		
		private byte _EndLesson;
		
		private EntitySet<CourseBookInfo> _CourseBookInfo;
		
		private EntityRef<CourseInfo> _CourseInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnWeekChanging(byte value);
    partial void OnWeekChanged();
    partial void OnWeekDayChanging(byte value);
    partial void OnWeekDayChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnBeginLessonChanging(byte value);
    partial void OnBeginLessonChanged();
    partial void OnEndLessonChanging(byte value);
    partial void OnEndLessonChanged();
    #endregion
		
		public CourseArrange()
		{
			this._CourseBookInfo = new EntitySet<CourseBookInfo>(new Action<CourseBookInfo>(this.attach_CourseBookInfo), new Action<CourseBookInfo>(this.detach_CourseBookInfo));
			this._CourseInfo = default(EntityRef<CourseInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._CourseInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Week", DbType="TinyInt NOT NULL")]
		public byte Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="TinyInt NOT NULL")]
		public byte WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginLesson", DbType="TinyInt NOT NULL")]
		public byte BeginLesson
		{
			get
			{
				return this._BeginLesson;
			}
			set
			{
				if ((this._BeginLesson != value))
				{
					this.OnBeginLessonChanging(value);
					this.SendPropertyChanging();
					this._BeginLesson = value;
					this.SendPropertyChanged("BeginLesson");
					this.OnBeginLessonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndLesson", DbType="TinyInt NOT NULL")]
		public byte EndLesson
		{
			get
			{
				return this._EndLesson;
			}
			set
			{
				if ((this._EndLesson != value))
				{
					this.OnEndLessonChanging(value);
					this.SendPropertyChanging();
					this._EndLesson = value;
					this.SendPropertyChanged("EndLesson");
					this.OnEndLessonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseArrange_CourseBookInfo", Storage="_CourseBookInfo", ThisKey="Id", OtherKey="CourseArrangeId")]
		public EntitySet<CourseBookInfo> CourseBookInfo
		{
			get
			{
				return this._CourseBookInfo;
			}
			set
			{
				this._CourseBookInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_CourseArrange", Storage="_CourseInfo", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseInfo CourseInfo
		{
			get
			{
				return this._CourseInfo.Entity;
			}
			set
			{
				CourseInfo previousValue = this._CourseInfo.Entity;
				if (((previousValue != value) 
							|| (this._CourseInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInfo.Entity = null;
						previousValue.CourseArrange.Remove(this);
					}
					this._CourseInfo.Entity = value;
					if ((value != null))
					{
						value.CourseArrange.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("CourseInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseBookInfo(CourseBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.CourseArrange = this;
		}
		
		private void detach_CourseBookInfo(CourseBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.CourseArrange = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseBookInfo")]
	public partial class CourseBookInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseArrangeId;
		
		private string _StudentId;
		
		private System.Nullable<System.DateTime> _BookTime;
		
		private string _UserAgent;
		
		private EntityRef<CourseArrange> _CourseArrange;
		
		private EntityRef<StudentInfo> _StudentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseArrangeIdChanging(int value);
    partial void OnCourseArrangeIdChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnBookTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBookTimeChanged();
    partial void OnUserAgentChanging(string value);
    partial void OnUserAgentChanged();
    #endregion
		
		public CourseBookInfo()
		{
			this._CourseArrange = default(EntityRef<CourseArrange>);
			this._StudentInfo = default(EntityRef<StudentInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseArrangeId", DbType="Int NOT NULL")]
		public int CourseArrangeId
		{
			get
			{
				return this._CourseArrangeId;
			}
			set
			{
				if ((this._CourseArrangeId != value))
				{
					if (this._CourseArrange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseArrangeIdChanging(value);
					this.SendPropertyChanging();
					this._CourseArrangeId = value;
					this.SendPropertyChanged("CourseArrangeId");
					this.OnCourseArrangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._StudentInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BookTime
		{
			get
			{
				return this._BookTime;
			}
			set
			{
				if ((this._BookTime != value))
				{
					this.OnBookTimeChanging(value);
					this.SendPropertyChanging();
					this._BookTime = value;
					this.SendPropertyChanged("BookTime");
					this.OnBookTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAgent", DbType="NVarChar(150)")]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseArrange_CourseBookInfo", Storage="_CourseArrange", ThisKey="CourseArrangeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseArrange CourseArrange
		{
			get
			{
				return this._CourseArrange.Entity;
			}
			set
			{
				CourseArrange previousValue = this._CourseArrange.Entity;
				if (((previousValue != value) 
							|| (this._CourseArrange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseArrange.Entity = null;
						previousValue.CourseBookInfo.Remove(this);
					}
					this._CourseArrange.Entity = value;
					if ((value != null))
					{
						value.CourseBookInfo.Add(this);
						this._CourseArrangeId = value.Id;
					}
					else
					{
						this._CourseArrangeId = default(int);
					}
					this.SendPropertyChanged("CourseArrange");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_CourseBookInfo", Storage="_StudentInfo", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public StudentInfo StudentInfo
		{
			get
			{
				return this._StudentInfo.Entity;
			}
			set
			{
				StudentInfo previousValue = this._StudentInfo.Entity;
				if (((previousValue != value) 
							|| (this._StudentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentInfo.Entity = null;
						previousValue.CourseBookInfo.Remove(this);
					}
					this._StudentInfo.Entity = value;
					if ((value != null))
					{
						value.CourseBookInfo.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("StudentInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseInfo")]
	public partial class CourseInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ExperimentId;
		
		private string _Address;
		
		private string _Introduction;
		
		private string _PhotoUrl;
		
		private System.Nullable<int> _TeacherId;
		
		private bool _Choosable;
		
		private int _Order;
		
		private short _ClassHour;
		
		private string _Attention;
		
		private EntitySet<Comment> _Comment;
		
		private EntitySet<CourseArrange> _CourseArrange;
		
		private EntitySet<PackagedCourse> _PackagedCourse;
		
		private EntityRef<TeacherInfo> _TeacherInfo;
		
		private EntityRef<ExperimentInfo> _ExperimentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExperimentIdChanging(System.Nullable<int> value);
    partial void OnExperimentIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnChoosableChanging(bool value);
    partial void OnChoosableChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnClassHourChanging(short value);
    partial void OnClassHourChanged();
    partial void OnAttentionChanging(string value);
    partial void OnAttentionChanged();
    #endregion
		
		public CourseInfo()
		{
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._CourseArrange = new EntitySet<CourseArrange>(new Action<CourseArrange>(this.attach_CourseArrange), new Action<CourseArrange>(this.detach_CourseArrange));
			this._PackagedCourse = new EntitySet<PackagedCourse>(new Action<PackagedCourse>(this.attach_PackagedCourse), new Action<PackagedCourse>(this.detach_PackagedCourse));
			this._TeacherInfo = default(EntityRef<TeacherInfo>);
			this._ExperimentInfo = default(EntityRef<ExperimentInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperimentId", DbType="Int")]
		public System.Nullable<int> ExperimentId
		{
			get
			{
				return this._ExperimentId;
			}
			set
			{
				if ((this._ExperimentId != value))
				{
					if (this._ExperimentInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIdChanging(value);
					this.SendPropertyChanging();
					this._ExperimentId = value;
					this.SendPropertyChanged("ExperimentId");
					this.OnExperimentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Introduction", DbType="NVarChar(MAX)")]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(150)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._TeacherInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choosable", DbType="Bit NOT NULL")]
		public bool Choosable
		{
			get
			{
				return this._Choosable;
			}
			set
			{
				if ((this._Choosable != value))
				{
					this.OnChoosableChanging(value);
					this.SendPropertyChanging();
					this._Choosable = value;
					this.SendPropertyChanged("Choosable");
					this.OnChoosableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassHour", DbType="SmallInt NOT NULL")]
		public short ClassHour
		{
			get
			{
				return this._ClassHour;
			}
			set
			{
				if ((this._ClassHour != value))
				{
					this.OnClassHourChanging(value);
					this.SendPropertyChanging();
					this._ClassHour = value;
					this.SendPropertyChanged("ClassHour");
					this.OnClassHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attention", DbType="NVarChar(150)")]
		public string Attention
		{
			get
			{
				return this._Attention;
			}
			set
			{
				if ((this._Attention != value))
				{
					this.OnAttentionChanging(value);
					this.SendPropertyChanging();
					this._Attention = value;
					this.SendPropertyChanged("Attention");
					this.OnAttentionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_Comment", Storage="_Comment", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_CourseArrange", Storage="_CourseArrange", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<CourseArrange> CourseArrange
		{
			get
			{
				return this._CourseArrange;
			}
			set
			{
				this._CourseArrange.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_PackagedCourse", Storage="_PackagedCourse", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<PackagedCourse> PackagedCourse
		{
			get
			{
				return this._PackagedCourse;
			}
			set
			{
				this._PackagedCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeacherInfo_CourseInfo", Storage="_TeacherInfo", ThisKey="TeacherId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public TeacherInfo TeacherInfo
		{
			get
			{
				return this._TeacherInfo.Entity;
			}
			set
			{
				TeacherInfo previousValue = this._TeacherInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeacherInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeacherInfo.Entity = null;
						previousValue.CourseInfo.Remove(this);
					}
					this._TeacherInfo.Entity = value;
					if ((value != null))
					{
						value.CourseInfo.Add(this);
						this._TeacherId = value.Id;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeacherInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExperimentInfo_CourseInfo", Storage="_ExperimentInfo", ThisKey="ExperimentId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public ExperimentInfo ExperimentInfo
		{
			get
			{
				return this._ExperimentInfo.Entity;
			}
			set
			{
				ExperimentInfo previousValue = this._ExperimentInfo.Entity;
				if (((previousValue != value) 
							|| (this._ExperimentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExperimentInfo.Entity = null;
						previousValue.CourseInfo.Remove(this);
					}
					this._ExperimentInfo.Entity = value;
					if ((value != null))
					{
						value.CourseInfo.Add(this);
						this._ExperimentId = value.Id;
					}
					else
					{
						this._ExperimentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExperimentInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = null;
		}
		
		private void attach_CourseArrange(CourseArrange entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = this;
		}
		
		private void detach_CourseArrange(CourseArrange entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = null;
		}
		
		private void attach_PackagedCourse(PackagedCourse entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = this;
		}
		
		private void detach_PackagedCourse(PackagedCourse entity)
		{
			this.SendPropertyChanging();
			entity.CourseInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoursePackage")]
	public partial class CoursePackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _ClassHour;
		
		private string _Address;
		
		private System.Nullable<int> _ExperimentId;
		
		private System.Nullable<int> _TeacherId;
		
		private EntitySet<PackageArrange> _PackageArrange;
		
		private EntitySet<PackagedCourse> _PackagedCourse;
		
		private EntityRef<TeacherInfo> _TeacherInfo;
		
		private EntityRef<ExperimentInfo> _ExperimentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClassHourChanging(int value);
    partial void OnClassHourChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnExperimentIdChanging(System.Nullable<int> value);
    partial void OnExperimentIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    #endregion
		
		public CoursePackage()
		{
			this._PackageArrange = new EntitySet<PackageArrange>(new Action<PackageArrange>(this.attach_PackageArrange), new Action<PackageArrange>(this.detach_PackageArrange));
			this._PackagedCourse = new EntitySet<PackagedCourse>(new Action<PackagedCourse>(this.attach_PackagedCourse), new Action<PackagedCourse>(this.detach_PackagedCourse));
			this._TeacherInfo = default(EntityRef<TeacherInfo>);
			this._ExperimentInfo = default(EntityRef<ExperimentInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassHour", DbType="Int NOT NULL")]
		public int ClassHour
		{
			get
			{
				return this._ClassHour;
			}
			set
			{
				if ((this._ClassHour != value))
				{
					this.OnClassHourChanging(value);
					this.SendPropertyChanging();
					this._ClassHour = value;
					this.SendPropertyChanged("ClassHour");
					this.OnClassHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperimentId", DbType="Int")]
		public System.Nullable<int> ExperimentId
		{
			get
			{
				return this._ExperimentId;
			}
			set
			{
				if ((this._ExperimentId != value))
				{
					if (this._ExperimentInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExperimentIdChanging(value);
					this.SendPropertyChanging();
					this._ExperimentId = value;
					this.SendPropertyChanged("ExperimentId");
					this.OnExperimentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._TeacherInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursePackage_PackageArrange", Storage="_PackageArrange", ThisKey="Id", OtherKey="CoursePackageId")]
		public EntitySet<PackageArrange> PackageArrange
		{
			get
			{
				return this._PackageArrange;
			}
			set
			{
				this._PackageArrange.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursePackage_PackagedCourse", Storage="_PackagedCourse", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<PackagedCourse> PackagedCourse
		{
			get
			{
				return this._PackagedCourse;
			}
			set
			{
				this._PackagedCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeacherInfo_CoursePackage", Storage="_TeacherInfo", ThisKey="TeacherId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public TeacherInfo TeacherInfo
		{
			get
			{
				return this._TeacherInfo.Entity;
			}
			set
			{
				TeacherInfo previousValue = this._TeacherInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeacherInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeacherInfo.Entity = null;
						previousValue.CoursePackage.Remove(this);
					}
					this._TeacherInfo.Entity = value;
					if ((value != null))
					{
						value.CoursePackage.Add(this);
						this._TeacherId = value.Id;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeacherInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExperimentInfo_CoursePackage", Storage="_ExperimentInfo", ThisKey="ExperimentId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ExperimentInfo ExperimentInfo
		{
			get
			{
				return this._ExperimentInfo.Entity;
			}
			set
			{
				ExperimentInfo previousValue = this._ExperimentInfo.Entity;
				if (((previousValue != value) 
							|| (this._ExperimentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExperimentInfo.Entity = null;
						previousValue.CoursePackage.Remove(this);
					}
					this._ExperimentInfo.Entity = value;
					if ((value != null))
					{
						value.CoursePackage.Add(this);
						this._ExperimentId = value.Id;
					}
					else
					{
						this._ExperimentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExperimentInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PackageArrange(PackageArrange entity)
		{
			this.SendPropertyChanging();
			entity.CoursePackage = this;
		}
		
		private void detach_PackageArrange(PackageArrange entity)
		{
			this.SendPropertyChanging();
			entity.CoursePackage = null;
		}
		
		private void attach_PackagedCourse(PackagedCourse entity)
		{
			this.SendPropertyChanging();
			entity.CoursePackage = this;
		}
		
		private void detach_PackagedCourse(PackagedCourse entity)
		{
			this.SendPropertyChanging();
			entity.CoursePackage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExperimentInfo")]
	public partial class ExperimentInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _PhotoUrl;
		
		private System.Nullable<int> _SemesterId;
		
		private int _Order;
		
		private EntitySet<CourseInfo> _CourseInfo;
		
		private EntitySet<CoursePackage> _CoursePackage;
		
		private EntityRef<Semester> _Semester;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnSemesterIdChanging(System.Nullable<int> value);
    partial void OnSemesterIdChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public ExperimentInfo()
		{
			this._CourseInfo = new EntitySet<CourseInfo>(new Action<CourseInfo>(this.attach_CourseInfo), new Action<CourseInfo>(this.detach_CourseInfo));
			this._CoursePackage = new EntitySet<CoursePackage>(new Action<CoursePackage>(this.attach_CoursePackage), new Action<CoursePackage>(this.detach_CoursePackage));
			this._Semester = default(EntityRef<Semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(150)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterId", DbType="Int")]
		public System.Nullable<int> SemesterId
		{
			get
			{
				return this._SemesterId;
			}
			set
			{
				if ((this._SemesterId != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIdChanging(value);
					this.SendPropertyChanging();
					this._SemesterId = value;
					this.SendPropertyChanged("SemesterId");
					this.OnSemesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExperimentInfo_CourseInfo", Storage="_CourseInfo", ThisKey="Id", OtherKey="ExperimentId")]
		public EntitySet<CourseInfo> CourseInfo
		{
			get
			{
				return this._CourseInfo;
			}
			set
			{
				this._CourseInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExperimentInfo_CoursePackage", Storage="_CoursePackage", ThisKey="Id", OtherKey="ExperimentId")]
		public EntitySet<CoursePackage> CoursePackage
		{
			get
			{
				return this._CoursePackage;
			}
			set
			{
				this._CoursePackage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_ExperimentInfo", Storage="_Semester", ThisKey="SemesterId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.ExperimentInfo.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.ExperimentInfo.Add(this);
						this._SemesterId = value.Id;
					}
					else
					{
						this._SemesterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseInfo(CourseInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentInfo = this;
		}
		
		private void detach_CourseInfo(CourseInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentInfo = null;
		}
		
		private void attach_CoursePackage(CoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentInfo = this;
		}
		
		private void detach_CoursePackage(CoursePackage entity)
		{
			this.SendPropertyChanging();
			entity.ExperimentInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageArrange")]
	public partial class PackageArrange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CoursePackageId;
		
		private string _CustomTime;
		
		private int _Capacity;
		
		private EntitySet<PackageBookInfo> _PackageBookInfo;
		
		private EntityRef<CoursePackage> _CoursePackage;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCoursePackageIdChanging(int value);
    partial void OnCoursePackageIdChanged();
    partial void OnCustomTimeChanging(string value);
    partial void OnCustomTimeChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    #endregion
		
		public PackageArrange()
		{
			this._PackageBookInfo = new EntitySet<PackageBookInfo>(new Action<PackageBookInfo>(this.attach_PackageBookInfo), new Action<PackageBookInfo>(this.detach_PackageBookInfo));
			this._CoursePackage = default(EntityRef<CoursePackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursePackageId", DbType="Int NOT NULL")]
		public int CoursePackageId
		{
			get
			{
				return this._CoursePackageId;
			}
			set
			{
				if ((this._CoursePackageId != value))
				{
					if (this._CoursePackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoursePackageIdChanging(value);
					this.SendPropertyChanging();
					this._CoursePackageId = value;
					this.SendPropertyChanged("CoursePackageId");
					this.OnCoursePackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomTime", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CustomTime
		{
			get
			{
				return this._CustomTime;
			}
			set
			{
				if ((this._CustomTime != value))
				{
					this.OnCustomTimeChanging(value);
					this.SendPropertyChanging();
					this._CustomTime = value;
					this.SendPropertyChanged("CustomTime");
					this.OnCustomTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageArrange_PackageBookInfo", Storage="_PackageBookInfo", ThisKey="Id", OtherKey="PackageArrangeId")]
		public EntitySet<PackageBookInfo> PackageBookInfo
		{
			get
			{
				return this._PackageBookInfo;
			}
			set
			{
				this._PackageBookInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursePackage_PackageArrange", Storage="_CoursePackage", ThisKey="CoursePackageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CoursePackage CoursePackage
		{
			get
			{
				return this._CoursePackage.Entity;
			}
			set
			{
				CoursePackage previousValue = this._CoursePackage.Entity;
				if (((previousValue != value) 
							|| (this._CoursePackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoursePackage.Entity = null;
						previousValue.PackageArrange.Remove(this);
					}
					this._CoursePackage.Entity = value;
					if ((value != null))
					{
						value.PackageArrange.Add(this);
						this._CoursePackageId = value.Id;
					}
					else
					{
						this._CoursePackageId = default(int);
					}
					this.SendPropertyChanged("CoursePackage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PackageBookInfo(PackageBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.PackageArrange = this;
		}
		
		private void detach_PackageBookInfo(PackageBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.PackageArrange = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageBookInfo")]
	public partial class PackageBookInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PackageArrangeId;
		
		private string _StudentId;
		
		private System.Nullable<System.DateTime> _BookTime;
		
		private string _UserAgent;
		
		private EntityRef<PackageArrange> _PackageArrange;
		
		private EntityRef<StudentInfo> _StudentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPackageArrangeIdChanging(int value);
    partial void OnPackageArrangeIdChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnBookTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBookTimeChanged();
    partial void OnUserAgentChanging(string value);
    partial void OnUserAgentChanged();
    #endregion
		
		public PackageBookInfo()
		{
			this._PackageArrange = default(EntityRef<PackageArrange>);
			this._StudentInfo = default(EntityRef<StudentInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageArrangeId", DbType="Int NOT NULL")]
		public int PackageArrangeId
		{
			get
			{
				return this._PackageArrangeId;
			}
			set
			{
				if ((this._PackageArrangeId != value))
				{
					if (this._PackageArrange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageArrangeIdChanging(value);
					this.SendPropertyChanging();
					this._PackageArrangeId = value;
					this.SendPropertyChanged("PackageArrangeId");
					this.OnPackageArrangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._StudentInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BookTime
		{
			get
			{
				return this._BookTime;
			}
			set
			{
				if ((this._BookTime != value))
				{
					this.OnBookTimeChanging(value);
					this.SendPropertyChanging();
					this._BookTime = value;
					this.SendPropertyChanged("BookTime");
					this.OnBookTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAgent", DbType="NVarChar(150)")]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageArrange_PackageBookInfo", Storage="_PackageArrange", ThisKey="PackageArrangeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PackageArrange PackageArrange
		{
			get
			{
				return this._PackageArrange.Entity;
			}
			set
			{
				PackageArrange previousValue = this._PackageArrange.Entity;
				if (((previousValue != value) 
							|| (this._PackageArrange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageArrange.Entity = null;
						previousValue.PackageBookInfo.Remove(this);
					}
					this._PackageArrange.Entity = value;
					if ((value != null))
					{
						value.PackageBookInfo.Add(this);
						this._PackageArrangeId = value.Id;
					}
					else
					{
						this._PackageArrangeId = default(int);
					}
					this.SendPropertyChanged("PackageArrange");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_PackageBookInfo", Storage="_StudentInfo", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public StudentInfo StudentInfo
		{
			get
			{
				return this._StudentInfo.Entity;
			}
			set
			{
				StudentInfo previousValue = this._StudentInfo.Entity;
				if (((previousValue != value) 
							|| (this._StudentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentInfo.Entity = null;
						previousValue.PackageBookInfo.Remove(this);
					}
					this._StudentInfo.Entity = value;
					if ((value != null))
					{
						value.PackageBookInfo.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("StudentInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackagedCourse")]
	public partial class PackagedCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CourseId;
		
		private System.Nullable<int> _PackageId;
		
		private EntityRef<CourseInfo> _CourseInfo;
		
		private EntityRef<CoursePackage> _CoursePackage;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    partial void OnPackageIdChanging(System.Nullable<int> value);
    partial void OnPackageIdChanged();
    #endregion
		
		public PackagedCourse()
		{
			this._CourseInfo = default(EntityRef<CourseInfo>);
			this._CoursePackage = default(EntityRef<CoursePackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._CourseInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int")]
		public System.Nullable<int> PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._CoursePackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseInfo_PackagedCourse", Storage="_CourseInfo", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public CourseInfo CourseInfo
		{
			get
			{
				return this._CourseInfo.Entity;
			}
			set
			{
				CourseInfo previousValue = this._CourseInfo.Entity;
				if (((previousValue != value) 
							|| (this._CourseInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseInfo.Entity = null;
						previousValue.PackagedCourse.Remove(this);
					}
					this._CourseInfo.Entity = value;
					if ((value != null))
					{
						value.PackagedCourse.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoursePackage_PackagedCourse", Storage="_CoursePackage", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public CoursePackage CoursePackage
		{
			get
			{
				return this._CoursePackage.Entity;
			}
			set
			{
				CoursePackage previousValue = this._CoursePackage.Entity;
				if (((previousValue != value) 
							|| (this._CoursePackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoursePackage.Entity = null;
						previousValue.PackagedCourse.Remove(this);
					}
					this._CoursePackage.Entity = value;
					if ((value != null))
					{
						value.PackagedCourse.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CoursePackage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SchoolYear;
		
		private string _Season;
		
		private EntitySet<ExperimentInfo> _ExperimentInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSchoolYearChanging(string value);
    partial void OnSchoolYearChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    #endregion
		
		public Semester()
		{
			this._ExperimentInfo = new EntitySet<ExperimentInfo>(new Action<ExperimentInfo>(this.attach_ExperimentInfo), new Action<ExperimentInfo>(this.detach_ExperimentInfo));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYear", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string SchoolYear
		{
			get
			{
				return this._SchoolYear;
			}
			set
			{
				if ((this._SchoolYear != value))
				{
					this.OnSchoolYearChanging(value);
					this.SendPropertyChanging();
					this._SchoolYear = value;
					this.SendPropertyChanged("SchoolYear");
					this.OnSchoolYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_ExperimentInfo", Storage="_ExperimentInfo", ThisKey="Id", OtherKey="SemesterId")]
		public EntitySet<ExperimentInfo> ExperimentInfo
		{
			get
			{
				return this._ExperimentInfo;
			}
			set
			{
				this._ExperimentInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExperimentInfo(ExperimentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_ExperimentInfo(ExperimentInfo entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentInfo")]
	public partial class StudentInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private bool _Sex;
		
		private string _PhoneNumber;
		
		private string _Class;
		
		private string _College;
		
		private int _AccountId;
		
		private string _Email;
		
		private EntitySet<CourseBookInfo> _CourseBookInfo;
		
		private EntitySet<PackageBookInfo> _PackageBookInfo;
		
		private EntityRef<Account> _Account;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnCollegeChanging(string value);
    partial void OnCollegeChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public StudentInfo()
		{
			this._CourseBookInfo = new EntitySet<CourseBookInfo>(new Action<CourseBookInfo>(this.attach_CourseBookInfo), new Action<CourseBookInfo>(this.detach_CourseBookInfo));
			this._PackageBookInfo = new EntitySet<PackageBookInfo>(new Action<PackageBookInfo>(this.attach_PackageBookInfo), new Action<PackageBookInfo>(this.detach_PackageBookInfo));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(30)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_College", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string College
		{
			get
			{
				return this._College;
			}
			set
			{
				if ((this._College != value))
				{
					this.OnCollegeChanging(value);
					this.SendPropertyChanging();
					this._College = value;
					this.SendPropertyChanged("College");
					this.OnCollegeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_CourseBookInfo", Storage="_CourseBookInfo", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<CourseBookInfo> CourseBookInfo
		{
			get
			{
				return this._CourseBookInfo;
			}
			set
			{
				this._CourseBookInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_PackageBookInfo", Storage="_PackageBookInfo", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<PackageBookInfo> PackageBookInfo
		{
			get
			{
				return this._PackageBookInfo;
			}
			set
			{
				this._PackageBookInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_StudentInfo", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.StudentInfo.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.StudentInfo.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseBookInfo(CourseBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = this;
		}
		
		private void detach_CourseBookInfo(CourseBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = null;
		}
		
		private void attach_PackageBookInfo(PackageBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = this;
		}
		
		private void detach_PackageBookInfo(PackageBookInfo entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = null;
		}
	}
}
#pragma warning restore 1591
